/*
 * This ratpack file was auto generated by 'gigawatt'
 * @author d7392
 * @date 16-06-2018 02.36
 */
// external
import groovy.json.JsonSlurper
import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson
import groovy.sql.Sql
import java.util.Properties
// ratpack
import static ratpack.groovy.Groovy.ratpack
import ratpack.groovy.template.MarkupTemplateModule
import static ratpack.groovy.Groovy.groovyMarkupTemplate
import ratpack.http.client.HttpClient
import ratpack.hikari.HikariModule
import com.zaxxer.hikari.HikariConfig
import ratpack.groovy.sql.SqlModule
import ratpack.exec.Blocking
// local
import it.italiaonline.grational.yext.Analytics
import it.italiaonline.grational.ratpack.conf.YextApi
import it.italiaonline.grational.ratpack.conf.IolconnectDb

ratpack {

	handlers {
		files { dir('static') }
		prefix('support/yext/google/actions') {
			get ('query') {
				render(
					groovyMarkupTemplate([
							title: "Query Yext for Google Actions",
							start: "2018-01-01",
							end:   "2018-06-04"
						],
						"form.gtpl"
					)
				)
			}

			get('result') { HttpClient httpClient, YextApi api, Sql iolconnectDb ->
				def qp = request.queryParams

				Blocking.get {
					iolconnectDb.firstRow("""
						|select
						|  b.ID_CUSTOMER id,
						|  b.NAME        name,
						|  b.ID_BOZZA    bozza,
						|  sb.STATO      state
						| from BOZZA b
						| left join STATI_BOZZA sb on b.ID_STATO = sb.ID_STATO
						| where b.CC_IDB = '${qp.id}'""".stripMargin())
				} then { row ->
					// increase of one day because the upper interval is open
					def end = (Date.parse('yyyy-MM-dd',qp.end) + 1)
				          	.format('yyyy-MM-dd')
					def analytics = new Analytics (
						customer: row.id,
						start:    qp.start,
						end:      end,
						api:      api
					)

					httpClient.post(analytics.uri()) { s ->
						s.headers.set('Host', analytics.hostname())
						s.headers.set('Content-Type', 'application/json')
						s.body.text(toJson(analytics.payload()))
					}.then { output ->
						assert output.statusCode == 200
						def ga = new JsonSlurper().parseText(output.body.text)
						ga.response.data.sort { a,b -> b.day <=> a.day }
						render(
							groovyMarkupTemplate([
								title:  "Google Actions",
								period: "${qp.start} / ${qp.end}",
								actions: ga.response.data,
								name:    row.name,
								id:      row.id,
								bozza:   row.bozza,
								state:   row.state ],
								"output.gtpl"
							)
						)
					}
				} // then
			} // get('result')
		} // prefix
	} // handlers 
} // ratpack
